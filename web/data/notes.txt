Feb

Importer app
 - not just binary Garbage or not garbage
 - Garbage or birds,
 - Animate burst
 -  


 PhotoMat
 - Make a call to virtual memory - get locally
 - 


Constraint
- importer - iOS app
- design of the backend 
- Additional metadata
- 




Temperature
Humidity

Swipe left right for bursts
pick up and drop labels

Google maps integration
pause and play

timeline is helpful
swipe label to left to delete
new cell to add
long tap to edit

color the dots on the timeline
- labelled vs non-labelled

- examined
- labeled 
- deleted

Initial state is grey
delete - red
label - green
no action - stays grey

- delete unrecoverable  - has a dialog box

- Once you create a label, its default position is in the top
= 


Q: How to get nominal time?


3/4

Import - View
 o Import my pictures
 o Pull up picture

 o Separate importing from labelling

 o Analyze tab - select multiple deployment - superset of data

 o Add to backpack button on every view

 o 4 tabs
   Import 
   Filter
     Not posted to central server until filtering is done.

   Label
    o Most of the time we import other people's labels

    o Copy author's labels into mine - clone other people's data set

    o Need to be able to ask - who has 

    o Image set - 
      a) My deployments
      b) Suzy's deployment - read only
      c) My clone of Suzy's deployment


   Analyze
    o Slect only 1 label set from the deployment

   Notes


Save to Knapsack - save screenshot
Send to some server
 Along with identity of person
 Along with some metadata
   if analyze view - 
    what tag set you were working with
    if we had multiple tag sets
    metadata is what tag sets we drew from



3/13

New requirements
----------------
o Need to be able to import a picture from backpack from photo album
o Resources web page

o import metat page - 
  o retrieve data - should be editable




login
sets
labels (page should indicate set)
analysis (page should indicate sets, somehow)
resources (web browser with pre-defined links)
photos (select one photo from album, blow up to full screen)






select * from deployment where owner in (select person_id from person_membership where class_id in (select class_id from person_membership where person_id=1));


select m.person_id from person_membership m join person_membership n on n.person_id=1 and m.class_id = n.class_id;
select distinct(m.person_id) from person_membership m join person_membership n on m.class_id = n.class_id and n.person_id=4;


select * from 
deployment d join 
person_membership m 
on d.owner=m.person_id 
join person_membership n on 
m.class_id = n.class_id and n.person_id = 1;



select * from 
deployment d join (
select distinct(m.person_id) from person_membership m join person_membership n on m.class_id = n.class_id and n.person_id=4) p
on d.owner=p.person_id
;




my class only: 
select * from deployment d join 
(select distinct(m.person_id) from person_membership m join person_membership n on m.class_id = n.class_id and n.person_id=4) p 
on d.owner=p.person_id;


select * from deployment d join 
(select distinct(m.person_id) from person_membership m join person_membership n on m.class_id = n.class_id and n.person_id=4) p 
on d.owner=p.person_id;




my school

select distinct(school_id) from person_membership n join class c on n.class_id = c.id and n.person_id=1;


persons that are in school 1
trapdb=> select distinct(m.person_id) from person_membership m join class c0 on c0.id = m.class_id and c0.school_id=1;

persons that are in same school as person 1
select distinct(m.person_id) from person_membership m join class c0 on c0.id = m.class_id join (SELECT distinct(school_id) from person_membership n join class c on n.class_id = c.id and n.person_id=1) s on s.school_id = c0.school_id



select distinct(m.person_id) from person_membership m join class c0 on c0.id = m.class_id join (SELECT distinct(school_id) from person_membership n join class c on n.class_id = c.id and n.person_id=3) s on s.school_id = c0.school_id



deployments from persons in same school as pers 1
select * from deployment d join (select distinct(m.person_id) from person_membership m join class c0 on c0.id = m.class_id join (SELECT distinct(school_id) from person_membership n join class c on n.class_id = c.id and n.person_id=3) s on s.school_id = c0.school_id) p on d.person_id = p.person_id





my class only: 
select * from deployment d join 
(select distinct(m.person_id) from person_membership m join person_membership n on m.class_id = n.class_id and n.person_id=4) p 
on d.owner=p.person_id;

select * from deployment d join (select distinct(m.person_id) from person_membership m join class c0 on c0.id = m.class_id join (SELECT distinct(school_id) from person_membership n join class c on n.class_id = c.id and n.person_id=3) s on s.school_id = c0.school_id) p on d.person_id = p.person_id










































































